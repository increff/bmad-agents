/**
 * Environment Setup Script for VIRAT
 * Ensures .env file is created and properly configured for Notion integration
 */

const fs = require('fs').promises;
const path = require('path');
const chalk = require('chalk');

class EnvironmentSetup {
    constructor() {
        this.installDir = path.dirname(__dirname);
        this.envPath = path.join(this.installDir, '.env');
        this.configPath = path.join(this.installDir, 'config.yaml');
    }

    /**
     * Create or update .env file with Notion API credentials
     */
    async setupEnvironment(notionApiKey, notionDatabaseId = '') {
        try {
            console.log(chalk.blue('🔧 Setting up VIRAT environment configuration...'));
            
            // Validate API key
            if (!notionApiKey || notionApiKey.trim() === '') {
                console.log(chalk.yellow('⚠️  No Notion API key provided - skipping .env creation'));
                return false;
            }

            if (notionApiKey === 'your_notion_api_key_here' || notionApiKey.startsWith('your_notion')) {
                throw new Error('❌ Placeholder API key detected - please provide a real Notion API key');
            }

            // Create .env content
            const envContent = this.buildEnvContent(notionApiKey, notionDatabaseId);
            
            // Write .env file
            await fs.writeFile(this.envPath, envContent, 'utf8');
            
            console.log(chalk.green('✅ .env file created successfully'));
            console.log(chalk.dim(`   Location: ${this.envPath}`));
            console.log(chalk.dim(`   Contains: NOTION_API_KEY, NOTION_DATABASE_ID`));
            
            // Update config.yaml to reflect environment setup
            await this.updateConfigYaml(notionApiKey, notionDatabaseId);
            
            return true;
            
        } catch (error) {
            console.error(chalk.red('❌ Failed to setup environment:'), error.message);
            return false;
        }
    }

    /**
     * Build .env file content
     */
    buildEnvContent(notionApiKey, notionDatabaseId) {
        const timestamp = new Date().toISOString();
        
        return `# VIRAT Environment Configuration
# Generated by BMAD installer on ${timestamp}
# This file contains sensitive API credentials - DO NOT COMMIT TO VERSION CONTROL

# Notion Integration Configuration
NOTION_API_KEY=${notionApiKey}
NOTION_DATABASE_ID=${notionDatabaseId}

# Optional Notion Configuration
NOTION_VIEW_ID=
NOTION_API_VERSION=2022-06-28

# VIRAT Configuration
VIRAT_ENV_FILE=${this.envPath}
VIRAT_CONFIG_FILE=${this.configPath}
`;
    }

    /**
     * Update config.yaml to reflect environment setup
     */
    async updateConfigYaml(notionApiKey, notionDatabaseId) {
        try {
            const yaml = require('js-yaml');
            
            // Read existing config
            const configContent = await fs.readFile(this.configPath, 'utf8');
            const config = yaml.load(configContent);
            
            // Update Notion configuration
            if (!config.notion) {
                config.notion = {};
            }
            
            config.notion.enabled = true;
            config.notion.api_key = notionApiKey;
            config.notion.database_id = notionDatabaseId;
            config.notion.env_file = this.envPath;
            
            // Write updated config
            const updatedConfig = yaml.dump(config, { indent: 2 });
            await fs.writeFile(this.configPath, updatedConfig, 'utf8');
            
            console.log(chalk.green('✅ config.yaml updated with Notion configuration'));
            
        } catch (error) {
            console.warn(chalk.yellow('⚠️  Could not update config.yaml:'), error.message);
        }
    }

    /**
     * Verify environment setup
     */
    async verifyEnvironment() {
        try {
            console.log(chalk.blue('🔍 Verifying VIRAT environment setup...'));
            
            // Check if .env file exists
            const envExists = await this.fileExists(this.envPath);
            if (!envExists) {
                console.log(chalk.red('❌ .env file not found'));
                return false;
            }
            
            // Load and verify .env content
            const dotenv = require('dotenv');
            const envConfig = dotenv.config({ path: this.envPath });
            
            if (envConfig.error) {
                console.log(chalk.red('❌ Error loading .env file:'), envConfig.error.message);
                return false;
            }
            
            // Check required variables
            const apiKey = process.env.NOTION_API_KEY;
            const databaseId = process.env.NOTION_DATABASE_ID;
            
            console.log(chalk.green('✅ .env file loaded successfully'));
            console.log(chalk.dim(`   API Key: ${apiKey ? 'Set (' + apiKey.length + ' chars)' : 'Not set'}`));
            console.log(chalk.dim(`   Database ID: ${databaseId || 'Not set'}`));
            
            if (!apiKey || apiKey === 'your_notion_api_key_here') {
                console.log(chalk.red('❌ Invalid API key'));
                return false;
            }
            
            console.log(chalk.green('✅ Environment verification passed'));
            return true;
            
        } catch (error) {
            console.error(chalk.red('❌ Environment verification failed:'), error.message);
            return false;
        }
    }

    /**
     * Load environment for VIRAT operations
     */
    async loadEnvironment() {
        try {
            // Force load .env file with override
            const dotenv = require('dotenv');
            const envConfig = dotenv.config({ 
                path: this.envPath, 
                override: true 
            });
            
            if (envConfig.error) {
                throw new Error(`Failed to load .env file: ${envConfig.error.message}`);
            }
            
            // Validate required variables
            const apiKey = process.env.NOTION_API_KEY;
            if (!apiKey || apiKey === 'your_notion_api_key_here') {
                throw new Error('Invalid or missing NOTION_API_KEY');
            }
            
            return {
                notionApiKey: apiKey,
                notionDatabaseId: process.env.NOTION_DATABASE_ID || '',
                notionViewId: process.env.NOTION_VIEW_ID || '',
                apiVersion: process.env.NOTION_API_VERSION || '2022-06-28'
            };
            
        } catch (error) {
            throw new Error(`Environment loading failed: ${error.message}`);
        }
    }

    /**
     * Check if file exists
     */
    async fileExists(filePath) {
        try {
            await fs.access(filePath);
            return true;
        } catch {
            return false;
        }
    }

    /**
     * Get environment file path
     */
    getEnvFilePath() {
        return this.envPath;
    }
}

// CLI interface
if (require.main === module) {
    const args = process.argv.slice(2);
    const command = args[0];
    
    const setup = new EnvironmentSetup();
    
    switch (command) {
        case 'setup': {
            const apiKey = args[1];
            const databaseId = args[2] || '';
            setup.setupEnvironment(apiKey, databaseId);
            break;
        }
            
        case 'verify':
            setup.verifyEnvironment();
            break;
            
        case 'load':
            setup.loadEnvironment()
                .then(env => {
                    console.log('Environment loaded:', env);
                })
                .catch(error => {
                    console.error('Failed to load environment:', error.message);
                    throw error;
                });
            break;
            
        default:
            console.log('Usage:');
            console.log('  node env-setup.js setup <api_key> [database_id]');
            console.log('  node env-setup.js verify');
            console.log('  node env-setup.js load');
            break;
    }
}

module.exports = EnvironmentSetup;
